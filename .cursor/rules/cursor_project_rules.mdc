---
description: Apply these rules when making changes to the project
globs:
alwaysApply: true
---

Update this rule if user requested changes to the project requirement, etc.
## Project Overview

*   **Type:** Developer-Centric Shopify Theme
*   **Description:** The Base Theme is a developer-centric Shopify theme designed for clean code, maintainability, and ease of customization, providing a solid, uncluttered starting point for Shopify projects.
*   **Primary Goal:** Simplify theme customization and enhance performance while leveraging modern Shopify development features such as Online Store 2.0 and Shopify CLI 3.0.

## Project Structure

### Framework-Specific Routing

*   **Directory Rules:**

    *   **Liquid / Shopify CLI 3.0 & Online Store 2.0:** Follow Shopify theme conventions with a focus on sectioned JSON templates and Liquid files. For example:

        *   Example 1: "Shopify Online Store 2.0" → Use `templates/` for page structures (e.g., `templates/product.liquid`, `templates/collection.liquid`)
        *   Example 2: "Shopify Sections" → Use `sections/` for modular components (e.g., `sections/header.liquid`, `sections/cart-drawer.liquid`)

### Core Directories

*   **Versioned Structure:**

    *   **templates:** Implements Shopify Online Store 2.0 JSON templates and Liquid-based page structures.
    *   **sections:** Contains modular Liquid sections and components for reusability and clarity.
    *   **assets:** Holds CSS, JavaScript, images, and custom web components.
    *   **config:** Stores theme settings and schema definitions (e.g., `settings_schema.json`).

### Key Files

*   **Stack-Versioned Patterns:**

    *   **layout/theme.liquid:** The root theme layout file that defines the overall page structure.
    *   **templates/product.liquid:** Handles product display logic including Section Rendering API calls for variant selection updates.
    *   **sections/cart-drawer.liquid:** Defines the cart drawer structure and integrates Alpine.js for reactive state updates.

## Tech Stack Rules

*   **Version Enforcement:**

    *   **Shopify CLI@3.0:** Enforce usage of Shopify CLI v3.0 commands for theme development and deployment.
    *   **Liquid:** Follow Shopify’s Liquid templating best practices for clean, modular code.
    *   **Online Store 2.0:** Must leverage the JSON templates and new sectioned theme architecture.

## PRD Compliance

*   **Non-Negotiable:**

    *   "Implement Shopify Online Store 2.0 features with Section Rendering API for product variant updates, ensuring compliance with API rate limits and performance optimizations as per Shopify guidelines."

## App Flow Integration

*   **Stack-Aligned Flow:**

    *   Example: "Cart Drawer State Management → The `sections/cart-drawer.liquid` file integrates Alpine.js to handle `item-added-to-cart` events and update the cart in real time."

## Best Practices

*   **Liquid**

    *   Maintain clean and modular code with reusable snippets and sections.
    *   Follow Shopify’s theme conventions and utilize the Section Rendering API efficiently.
    *   Avoid mixing business logic within template files; delegate to sections and snippets.

*   **JavaScript**

    *   Follow ES6+ standards and keep code modular.
    *   Utilize event delegation especially for handling custom events like `item-added-to-cart`.
    *   Implement robust error handling for AJAX interactions and asynchronous updates.

*   **CSS**

    *   Write maintainable and scalable styles, preferably using methodologies like BEM.
    *   Reduce dependencies on external frameworks to keep performance optimal.
    *   Use pre-processors if beneficial for modularity and maintainability.

*   **Alpine.js**

    *   Keep state management clear and confined to specific components (e.g., header search, cart drawer).
    *   Minimize inline scripting; encapsulate behaviors within component initialization.
    *   Optimize updates to prevent unnecessary re-renders and ensure smooth UI interactions.

*   **Liquid AJAX Cart**

    *   Ensure form submissions are handled asynchronously with proper user feedback on errors.
    *   Maintain seamless cart updates by integrating with custom events.
    *   Validate functionalities across different cart interactions like quantity updates.

*   **Swiper**

    *   Optimize settings for mobile touch interaction and responsiveness.
    *   Only include necessary features to avoid overhead.
    *   Integrate within the asset pipeline efficiently.

*   **Shopify CLI 3.0**

    *   Follow official documentation for theme initialization and deployment.
    *   Validate theme packaging and configuration before release.
    *   Integrate version control effectively across deployments.

*   **Online Store 2.0**

    *   Utilize JSON templates and new section functionalities to their full potential.
    *   Adhere to Shopify’s performance and design guidelines.
    *   Leverage native features over excessive customizations.

*   **Custom Web Components**

    *   Ensure components are encapsulated to prevent global namespace pollution.
    *   Design for reusability across multiple theme sections.
    *   Document component behavior for maintainability.

*   **Tools (Cursor, Claude 3.7 Sonnet)**

    *   Utilize advanced IDE capabilities to ensure code quality and maintainability.
    *   Integrate AI-assisted suggestions while ensuring manual code reviews.
    *   Keep development environments updated for optimal performance.

## Rules

*   Derive folder/file patterns directly from the techStackDoc versions and guidelines.
*   For Shopify themes using Online Store 2.0 and Shopify CLI 3.0, adhere strictly to the structure of `templates/`, `sections/`, and `assets/` directories.
*   Do not mix patterns from other routing frameworks such as Next.js App Router or Pages Router within the Shopify Liquid structure.
*   Ensure that custom events (e.g., `item-added-to-cart`) and component interactions remain consistent with Alpine.js state management and Shopify Liquid AJAX Cart behaviors.
