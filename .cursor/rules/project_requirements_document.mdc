---
description: Apply these rules when making changes to the project
globs:
alwaysApply: true
---

Update this rule if user requested changes to the project requirement, etc.
# Project Requirements Document: Shopify Base Theme

This document outlines the detailed requirements for the Shopify Base Theme, a developer-centric, lean, and customizable e-commerce theme. The theme is designed to provide a clean, well-organized starting point for building Shopify storefronts that are both high performance and easy to maintain. Leveraging modern development practices, the theme uses custom web components, Alpine.js for UI state management, and Shopify CLI 3.0 alongside Online Store 2.0 features—all without relying on complex build tools.

The primary objectives are to offer a minimal, dependency-light theme that developers can quickly customize while maintaining a strong focus on performance, accessibility, and responsiveness. Success will be measured by the ease of customization, streamlined code architecture, and an enhanced developer experience, all of which enable a smooth integration into the robust Shopify ecosystem.

## 1. In-Scope vs. Out-of-Scope

### In-Scope

*   **Clean Architecture:** A structured and well-organized file system with a clear separation of concerns aimed at maintainability.
*   **Minimal Dependencies:** Integration of only essential libraries such as Alpine.js, Liquid AJAX Cart, and Swiper.
*   **Shopify CLI 3.0 & Online Store 2.0 Features:** Full integration with the latest Shopify development tools and features.
*   **Custom Web Components:** Encapsulation of JavaScript logic within custom components.
*   **Performance Optimization:** Use of pure JavaScript and CSS to maintain a lightweight footprint.
*   **Simplified Customization:** Easy-to-modify sections and blocks for developers.
*   **Search Functionality:** Predictive search capabilities with vendor and pricing details.
*   **Cart Management:** AJAX cart with real-time updates, cart drawer, and notifications.
*   **Collection Management:** Advanced filtering, sorting, and pagination functionality.
*   **UI State Management:** Usage of Alpine.js for managing interactive states across the theme.
*   **Responsive Design & Animations:** Fluid layouts across devices with tasteful CSS/JS animations.
*   **Accessibility & Localization:** Built-in support for keyboard navigation, ARIA attributes, and multiple languages/currencies.

### Out-of-Scope

*   **Additional Build Tools:** No incorporation of external build tools (e.g., Webpack or Gulp) beyond what is needed.
*   **Advanced External Integrations:** Features not directly related to core theme functionality (e.g., third-party enterprise integrations) will be deferred.
*   **Custom Enterprise Features:** Extended functionalities or customizations that go beyond the basic theme setup may be considered for later phases.
*   **Extensive CMS or Backend Modules:** This project strictly focuses on the theme’s front-end aspects within the Shopify environment.

## 2. User Flow

A typical user journey begins at the header of the storefront, where users encounter a sleek, minimal interface. The header features a quick-search interface powered by Alpine.js and displays an interactive cart indicator managed by Liquid AJAX Cart. When a user searches for a product or views their cart, the system updates in real time and provides immediate feedback through a toggling cart drawer that is synced with the header.

After discovering products on the home or collection pages, the user moves to a product page where they interact with variant selectors rendered as custom web components (dropdowns or radio buttons). Each variant change triggers a seamless update via Shopify’s Section Rendering API, ensuring that product details such as images and descriptions remain current. As the user finalizes their selection and proceeds to the cart page, they experience real-time quantity adjustments and interactive notifications, allowing them to review their purchase before checking out—all while the system maintains consistency and responsiveness through shared Alpine.js data states.

## 3. Core Features

*   **Clean Architecture:** Organized file structure with clear separation of concerns for a maintainable codebase.
*   **Minimal Dependencies:** Only these libraries are included—Alpine.js, Liquid AJAX Cart, and Swiper—to keep overhead low.
*   **Shopify CLI 3.0 & Online Store 2.0:** Full use of modern Shopify development tools ensuring compatibility and feature support.
*   **Custom Web Components:** Encapsulation of core JavaScript functionality for reuse and clarity.
*   **Performance Optimization:** Designed to be lightweight with minimal JavaScript and CSS to speed up load times.
*   **Simplified Customization:** Sections and blocks structured to ease modification and extension by developers.
*   **Search Functionality:** Predictive search with optional display of vendor and pricing details.
*   **AJAX Cart Management:** Real-time cart updates, including a dynamic cart drawer and notifications.
*   **Collection Filtering, Sorting & Pagination:** Interactive systems for filtering products, sorting results, and managing paginated collections.
*   **UI State Management:** Utilized Alpine.js for a clear, shared state across components like the search bar and cart drawer.
*   **Animation & Responsiveness:** Fluid CSS/JS animations for scroll, zoom, and hover effects paired with layouts that adapt across mobile, tablet, and desktop.
*   **Accessibility & Localization:** Keyboard navigation, ARIA attributes, and multi-language/multi-currency support to ensure an inclusive user experience.

## 4. Tech Stack & Tools

*   **Frontend Languages & Frameworks:**

    *   Liquid (Shopify’s templating language for dynamic content)
    *   JavaScript with Alpine.js for UI state management and interactivity
    *   Custom Web Components for modular JavaScript functionality
    *   Swiper for image galleries and swiping interactions
    *   CSS/SCSS for styling

*   **Backend/Platform:**

    *   Shopify CLI 3.0 for theme development and deployment
    *   Online Store 2.0 features for improved store functionality
    *   Liquid AJAX Cart for managing real-time cart updates

*   **Development Tools:**

    *   Cursor IDE for advanced AI-powered coding and real-time suggestions

## 5. Non-Functional Requirements

*   **Performance:** The theme should have fast load times and be optimized for minimal resource usage.
*   **Responsiveness:** Must display correctly and operate fluidly across mobile, tablet, and desktop devices.
*   **Accessibility:** Adhere to WCAG standards, ensuring that keyboard navigation and ARIA attributes are properly implemented.
*   **Security:** Data protection and secure handling of user interactions (e.g., form submissions) throughout the theme.
*   **Maintainability:** Code must be neatly organized, well-documented, and structured to facilitate future updates and customizations.
*   **Scalability:** While the base theme is lightweight, it should allow for seamless integration of additional features in future iterations.

## 6. Constraints & Assumptions

*   **Shopify Environment Dependency:** The theme assumes full compatibility with Shopify’s Online Store 2.0 and utilization of Shopify CLI 3.0.
*   **No Build Tools:** The theme intentionally avoids any complex build tools, relying solely on pure JavaScript and CSS.
*   **Library Compatibility:** Assumes that the included libraries (Alpine.js, Liquid AJAX Cart, Swiper) are compatible with current and future Shopify platform updates.
*   **Developer-Centric Design:** The theme is built primarily with developers in mind, assuming a certain level of familiarity with web development principles and modern JavaScript frameworks.
*   **Browser Support:** Assumes usage within modern browsers that support custom web components, JavaScript ES6+, and CSS3.
*   **Integrated Tools:** Dependence on Cursor IDE suggests a workflow that supports real-time coding suggestions — ensure that team members have access to compatible development environments.

## 7. Known Issues & Potential Pitfalls

*   **Legacy Browser Compatibility:** Custom web components may not render as expected on older browsers. Testing and possible polyfill integration may be required.
*   **API Rate Limits:** Shopify’s Section Rendering API and Liquid AJAX Cart could face rate limits during high traffic. Implement caching or debounce strategies where necessary.
*   **Shared State Management:** Relying on Alpine.js for shared state across header and cart drawer might lead to complex state synchronization issues. Clear documentation and potentially a state management strategy can mitigate these risks.
*   **Customization Overhead:** While the theme is easy to customize, significant custom modifications may inadvertently introduce bloat if not carefully managed.
*   **Performance Trade-offs:** Emphasis on minimal dependencies requires careful review of any additional feature implementations to avoid compromising on performance.
*   **Maintenance of External Libraries:** Future updates or deprecation of included dependencies like Alpine.js or Swiper could require refactoring—stay updated with library changes.

This PRD provides a comprehensive guideline for the AI model, clearly outlining the project scope, expected functionality, technical stack, and potential challenges. Subsequent documents such as Tech Stack Document, Frontend Guidelines, Backend Structure, and App Flow Diagrams can be generated with these specifications as the foundational reference.
